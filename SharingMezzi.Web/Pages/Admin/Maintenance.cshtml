@page
@model SharingMezzi.Web.Pages.Admin.MaintenanceModel
@{
    ViewData["Title"] = "Manutenzione";
}

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">Segnalazioni di Manutenzione</h1>
            <p class="text-muted">Visualizza e gestisci i mezzi con problemi segnalati</p>
        </div>
        <div>
            <button class="btn btn-outline-secondary" onclick="refreshMaintenance()"><i class="fas fa-sync"></i> Aggiorna</button>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Mezzo</th>
                        <th>Tipo</th>
                        <th>Messaggio</th>
                        <th>Priorit√†</th>
                        <th>Timestamp</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody id="maintenanceTable"></tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function fetchMaintenanceAlerts() {
            const token = localStorage.getItem('token');
            try {
                const res = await fetch('/api/admin/maintenance-alerts', { headers: { 'Authorization': `Bearer ${token}` } });
                if (!res.ok) throw new Error('Errore caricamento segnalazioni');
                const data = await res.json();
                const tbody = document.getElementById('maintenanceTable');
                tbody.innerHTML = '';
                data.forEach(a => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td>${a.mezzoId}</td>
                        <td>${a.type}</td>
                        <td>${a.message}</td>
                        <td>${a.priority}</td>
                        <td>${new Date(a.timestamp).toLocaleString()}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-warning" onclick="assignMaintenance(${a.mezzoId})">Assegna</button>
                                <button class="btn btn-outline-success" onclick="repairVehicle(${a.mezzoId})">Ripara</button>
                            </div>
                        </td>
                    `;
                    tbody.appendChild(tr);
                });
            } catch (e) {
                showAlert(e.message || 'Errore', 'error');
            }
        }

        async function assignMaintenance(id) {
            if (!confirm('Assegnare manutenzione a questo mezzo?')) return;
            const token = localStorage.getItem('token');
            try {
                const res = await fetch(`/api/admin/schedule-maintenance/${id}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                    body: JSON.stringify({ note: 'Assegnazione da dashboard admin' })
                });
                if (res.ok) {
                    showAlert('Manutenzione programmata', 'success');
                    fetchMaintenanceAlerts();
                } else {
                    const err = await res.json();
                    showAlert(err.message || 'Errore', 'error');
                }
            } catch (e) {
                showAlert('Errore di connessione', 'error');
            }
        }

        async function repairVehicle(id) {
            if (!confirm('Segnare come riparato?')) return;
            const token = localStorage.getItem('token');
            try {
                const res = await fetch(`/api/admin/vehicles/${id}/repair`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                    body: JSON.stringify({ noteRiparazione: 'Riparazione completata da admin' })
                });
                if (res.ok) {
                    showAlert('Mezzo riparato', 'success');
                    fetchMaintenanceAlerts();
                } else {
                    const err = await res.json();
                    showAlert(err.message || 'Errore', 'error');
                }
            } catch (e) {
                showAlert('Errore di connessione', 'error');
            }
        }

        function refreshMaintenance() { fetchMaintenanceAlerts(); }

        document.addEventListener('DOMContentLoaded', () => {
            fetchMaintenanceAlerts();
        });
    </script>
}
