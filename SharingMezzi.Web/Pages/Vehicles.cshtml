@page
@model SharingMezzi.Web.Pages.VehiclesModel
@using SharingMezzi.Web.Models
@{
    ViewData["Title"] = "Mezzi Disponibili";
}

<div class="page-header">
    <h1 class="page-title">Mezzi Disponibili</h1>
    <p class="page-subtitle">Trova e prenota il mezzo più vicino a te</p>
</div>

<!-- Filter Section -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row align-items-center">
            <div class="col-md-3">
                <label for="vehicleType" class="form-label">Tipo Mezzo</label>
                <select id="vehicleType" class="form-control" onchange="filterVehicles()">
                    <option value="">Tutti i mezzi</option>
                    <option value="0">Biciclette</option>
                    <option value="1">E-Bike</option>
                    <option value="2">Scooter</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="batteryLevel" class="form-label">Livello Batteria</label>
                <select id="batteryLevel" class="form-control" onchange="filterVehicles()">
                    <option value="">Qualsiasi</option>
                    <option value="80">Sopra 80%</option>
                    <option value="50">Sopra 50%</option>
                    <option value="20">Sopra 20%</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="maxDistance" class="form-label">Distanza Max</label>
                <select id="maxDistance" class="form-control" onchange="filterVehicles()">
                    <option value="">Qualsiasi</option>
                    <option value="500">500m</option>
                    <option value="1000">1km</option>
                    <option value="2000">2km</option>
                </select>
            </div>
            <div class="col-md-3">
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" onclick="refreshVehicles()">
                        <i class="fas fa-sync-alt"></i> Aggiorna
                    </button>
                    <button class="btn btn-outline-secondary" onclick="toggleMapView()">
                        <i class="fas fa-map"></i> Mappa
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Map View (Initially Hidden) -->
<div id="mapView" class="card mb-4" style="display: none;">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-map-marked-alt text-primary"></i>
            Mappa Mezzi Disponibili
        </h5>
    </div>
    <div class="card-body">
        <div id="vehicleMap" style="height: 400px; background: #f8f9fa; border-radius: 8px; display: flex; align-items: center; justify-content: center;">
            <div class="text-center">
                <i class="fas fa-map fa-3x text-muted mb-3"></i>
                <p class="text-muted">Mappa OpenStreetMap con mezzi disponibili</p>
                <small class="text-muted">Qui verrà mostrata la mappa interattiva con i mezzi nelle vicinanze</small>
            </div>
        </div>
    </div>
</div>

<!-- Vehicles Grid -->
<div class="row" id="vehiclesGrid">
    @if (Model.Vehicles.Any())
    {
        @foreach (var vehicle in Model.Vehicles)
        {
            <div class="col-lg-4 col-md-6 mb-4 vehicle-card" 
                 data-type="@((int)vehicle.Tipo)" 
                 data-battery="@(vehicle.LivelloBatteria ?? 100)">
                <div class="card h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <h5 class="card-title">
                                @{
                                    var icon = vehicle.Tipo switch
                                    {
                                        VehicleType.Bicicletta => "fas fa-bicycle",
                                        VehicleType.EBike => "fas fa-bicycle",
                                        VehicleType.Scooter => "fas fa-motorcycle",
                                        _ => "fas fa-bicycle"
                                    };
                                }
                                <i class="@icon me-2"></i>
                                @vehicle.Modello
                            </h5>
                            <span class="badge badge-status status-@(vehicle.Stato.ToString().ToLower().Replace("_", "-"))">
                                @vehicle.Stato
                            </span>
                        </div>

                        <div class="vehicle-details">
                            <div class="row mb-2">
                                <div class="col-6">
                                    <small class="text-muted">Tipo:</small>
                                    <div class="fw-bold">@vehicle.Tipo</div>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted">Elettrico:</small>
                                    <div class="fw-bold">
                                        @if (vehicle.IsElettrico)
                                        {
                                            <text><i class="fas fa-bolt text-success"></i> Sì</text>
                                        }
                                        else
                                        {
                                            <text><i class="fas fa-times text-muted"></i> No</text>
                                        }
                                    </div>
                                </div>
                            </div>

                            @if (vehicle.IsElettrico && vehicle.LivelloBatteria.HasValue)
                            {
                                <div class="mb-3">
                                    <small class="text-muted">Livello Batteria:</small>
                                    <div class="progress mt-1">
                                        <div class="progress-bar @(vehicle.LivelloBatteria > 50 ? "bg-success" : vehicle.LivelloBatteria > 20 ? "bg-warning" : "bg-danger")" 
                                             role="progressbar" 
                                             style="width: @(vehicle.LivelloBatteria)%">
                                            @(vehicle.LivelloBatteria)%
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="row mb-3">
                                <div class="col-6">
                                    <small class="text-muted">Tariffa Base:</small>
                                    <div class="fw-bold text-primary">€@vehicle.TariffaFissa</div>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted">Al minuto:</small>
                                    <div class="fw-bold text-primary">€@vehicle.TariffaPerMinuto</div>
                                </div>
                            </div>

                            @if (vehicle.Parcheggio != null)
                            {
                                <div class="mb-3">
                                    <small class="text-muted">Posizione:</small>
                                    <div class="fw-bold">
                                        <i class="fas fa-map-marker-alt text-danger"></i>
                                        @vehicle.Parcheggio.Nome
                                    </div>
                                    <small class="text-muted">@vehicle.Parcheggio.Indirizzo</small>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        @if (vehicle.Stato == VehicleStatus.Disponibile)
                        {
                            <button class="btn btn-primary w-100" onclick="unlockVehicle(@vehicle.Id)">
                                <i class="fas fa-unlock"></i> Sblocca Mezzo
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary w-100" disabled>
                                <i class="fas fa-lock"></i> Non Disponibile
                            </button>
                        }
                        <div class="mt-2">
                            <button class="btn btn-outline-info btn-sm" onclick="showVehicleDetails(@vehicle.Id)">
                                <i class="fas fa-info-circle"></i> Dettagli
                            </button>
                            <button class="btn btn-outline-warning btn-sm" onclick="reportMaintenance(@vehicle.Id)">
                                <i class="fas fa-exclamation-triangle"></i> Segnala
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="card">
                <div class="card-body text-center py-5">
                    <i class="fas fa-bicycle fa-3x text-muted mb-3"></i>
                    <h4>Nessun mezzo disponibile</h4>
                    <p class="text-muted">Non ci sono mezzi disponibili in questo momento. Riprova più tardi.</p>
                    <button class="btn btn-primary" onclick="refreshVehicles()">
                        <i class="fas fa-sync-alt"></i> Aggiorna Lista
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<!-- Vehicle Details Modal -->
<div class="modal fade" id="vehicleDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Dettagli Mezzo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="vehicleDetailsContent">
                <!-- Vehicle details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
            </div>
        </div>
    </div>
</div>

<!-- Maintenance Report Modal -->
<div class="modal fade" id="maintenanceModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Segnala Problema</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="maintenanceForm">
                    <input type="hidden" id="maintenanceVehicleId" name="vehicleId">
                    <div class="mb-3">
                        <label for="maintenanceDescription" class="form-label">Descrizione del problema</label>
                        <textarea class="form-control" id="maintenanceDescription" name="description" rows="4" required
                                  placeholder="Descrivi il problema riscontrato..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-warning" onclick="submitMaintenanceReport()">
                    <i class="fas fa-paper-plane"></i> Invia Segnalazione
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let vehicles = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Vehicles));
        let filteredVehicles = vehicles;
        let mapVisible = false;

        function filterVehicles() {
            const typeFilter = document.getElementById('vehicleType').value;
            const batteryFilter = document.getElementById('batteryLevel').value;
            const distanceFilter = document.getElementById('maxDistance').value;

            const vehicleCards = document.querySelectorAll('.vehicle-card');
            
            vehicleCards.forEach(card => {
                let show = true;
                
                if (typeFilter && card.getAttribute('data-type') !== typeFilter) {
                    show = false;
                }
                
                if (batteryFilter && parseInt(card.getAttribute('data-battery')) < parseInt(batteryFilter)) {
                    show = false;
                }
                
                // Distance filter would require geolocation implementation
                
                card.style.display = show ? 'block' : 'none';
            });
        }

        function refreshVehicles() {
            window.location.reload();
        }

        function toggleMapView() {
            const mapView = document.getElementById('mapView');
            mapVisible = !mapVisible;
            mapView.style.display = mapVisible ? 'block' : 'none';
            
            if (mapVisible) {
                initializeVehicleMap();
            }
        }

        function initializeVehicleMap() {
            // Initialize OpenStreetMap with vehicle locations
            const mapElement = document.getElementById('vehicleMap');
            setTimeout(() => {
                mapElement.innerHTML = `
                    <div class="text-center">
                        <i class="fas fa-map fa-3x text-primary mb-3"></i>
                        <p class="text-primary">Mappa OpenStreetMap</p>
                        <small class="text-muted">Qui verranno mostrati i mezzi disponibili sulla mappa</small>
                    </div>
                `;
            }, 1000);
        }

        async function unlockVehicle(vehicleId) {
            if (!confirm('Sei sicuro di voler sbloccare questo mezzo?')) {
                return;
            }

            try {
                const response = await fetch(`/api/vehicles/${vehicleId}/unlock`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${app.getToken()}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    app.showAlert('Mezzo sbloccato con successo!', 'success');
                    setTimeout(() => {
                        window.location.href = '/Trips';
                    }, 2000);
                } else {
                    app.showAlert('Errore durante lo sblocco del mezzo', 'danger');
                }
            } catch (error) {
                console.error('Error unlocking vehicle:', error);
                app.showAlert('Errore di connessione', 'danger');
            }
        }

        async function showVehicleDetails(vehicleId) {
            const modal = new bootstrap.Modal(document.getElementById('vehicleDetailsModal'));
            const content = document.getElementById('vehicleDetailsContent');
            
            content.innerHTML = '<div class="text-center"><div class="spinner"></div> Caricamento...</div>';
            modal.show();

            try {
                const response = await fetch(`/api/vehicles/${vehicleId}`, {
                    headers: {
                        'Authorization': `Bearer ${app.getToken()}`
                    }
                });

                if (response.ok) {
                    const vehicle = await response.json();
                    content.innerHTML = `
                        <div class="vehicle-details-full">
                            <h5>${vehicle.modello}</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Tipo:</strong> ${vehicle.tipo}</p>
                                    <p><strong>Stato:</strong> ${vehicle.stato}</p>
                                    <p><strong>Elettrico:</strong> ${vehicle.isElettrico ? 'Sì' : 'No'}</p>
                                    ${vehicle.isElettrico ? `<p><strong>Batteria:</strong> ${vehicle.livelloBatteria}%</p>` : ''}
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Tariffa base:</strong> €${vehicle.tariffaFissa}</p>
                                    <p><strong>Al minuto:</strong> €${vehicle.tariffaPerMinuto}</p>
                                    ${vehicle.ultimaManutenzione ? `<p><strong>Ultima manutenzione:</strong> ${new Date(vehicle.ultimaManutenzione).toLocaleDateString()}</p>` : ''}
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    content.innerHTML = '<div class="alert alert-danger">Errore nel caricamento dei dettagli</div>';
                }
            } catch (error) {
                content.innerHTML = '<div class="alert alert-danger">Errore di connessione</div>';
            }
        }

        function reportMaintenance(vehicleId) {
            document.getElementById('maintenanceVehicleId').value = vehicleId;
            const modal = new bootstrap.Modal(document.getElementById('maintenanceModal'));
            modal.show();
        }

        async function submitMaintenanceReport() {
            const vehicleId = document.getElementById('maintenanceVehicleId').value;
            const description = document.getElementById('maintenanceDescription').value;

            if (!description.trim()) {
                app.showAlert('Inserisci una descrizione del problema', 'warning');
                return;
            }

            try {
                const response = await fetch(`/api/vehicles/${vehicleId}/maintenance`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${app.getToken()}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ description })
                });

                if (response.ok) {
                    app.showAlert('Segnalazione inviata con successo', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('maintenanceModal')).hide();
                    document.getElementById('maintenanceForm').reset();
                } else {
                    app.showAlert('Errore nell\'invio della segnalazione', 'danger');
                }
            } catch (error) {
                console.error('Error reporting maintenance:', error);
                app.showAlert('Errore di connessione', 'danger');
            }
        }

        // Initialize filters on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-refresh every 2 minutes
            setInterval(refreshVehicles, 120000);
        });
    </script>
}
