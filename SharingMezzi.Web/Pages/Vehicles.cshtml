@page "/Vehicles"
@model SharingMezzi.Web.Pages.VehiclesModel
@using SharingMezzi.Web.Models
@{
    ViewData["Title"] = "Mezzi Disponibili";
    Layout = "_Layout";
}

@section Styles {
    <style>
        /* CSS Variables */
        :root {
            --primary-600: #6366f1;
            --primary-100: #e0e7ff;
            --primary-50: #f0f4ff;
            --gray-900: #111827;
            --gray-600: #4b5563;
            --gray-100: #f3f4f6;
            --space-xs: 0.25rem;
            --space-sm: 0.5rem;
            --space-md: 1rem;
            --space-lg: 1.5rem;
            --space-xl: 2rem;
            --space-2xl: 2.5rem;
            --space-3xl: 3rem;
            --radius-lg: 12px;
            --radius-xl: 20px;
            --radius-2xl: 24px;
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1);
            --transition-medium: all 0.3s ease;
            --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: var(--font-sans);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: var(--gray-900);
            line-height: 1.6;
            min-height: 100vh;
            background-attachment: fixed;
        }

        .container-fluid {
            max-width: 1400px;
            margin: 0 auto;
            padding: var(--space-xl);
        }

        /* Hero Section */
        .hero-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-2xl);
            padding: var(--space-3xl) var(--space-2xl);
            margin-bottom: var(--space-2xl);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: var(--shadow-xl);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: var(--space-lg);
        }

        .hero-content {
            flex: 1;
        }

        .hero-title {
            color: white;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: var(--space-sm);
            display: flex;
            align-items: center;
            gap: var(--space-md);
        }

        .hero-subtitle {
            color: rgba(255, 255, 255, 0.8);
            font-size: 1.2rem;
            margin: 0;
        }

        .hero-stats {
            display: flex;
            gap: var(--space-lg);
            flex-wrap: wrap;
        }

        .hero-stat {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            padding: var(--space-md) var(--space-lg);
            border-radius: var(--radius-xl);
            color: white;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
            min-width: 100px;
        }

        .hero-stat-value {
            font-size: 1.75rem;
            font-weight: 700;
            display: block;
        }

        .hero-stat-label {
            font-size: 0.875rem;
            opacity: 0.8;
        }

        /* Filters Section */
        .filters-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-xl);
            padding: var(--space-xl);
            margin-bottom: var(--space-xl);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: var(--shadow-lg);
        }

        .filters-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--space-lg);
            flex-wrap: wrap;
            gap: var(--space-md);
        }

        .filters-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--gray-900);
            display: flex;
            align-items: center;
            gap: var(--space-sm);
            margin: 0;
        }

        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--space-lg);
            margin-bottom: var(--space-lg);
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: var(--space-sm);
        }

        .filter-label {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--gray-600);
        }

        .form-control, .form-select {
            padding: var(--space-md);
            border: 2px solid #e5e7eb;
            border-radius: var(--radius-lg);
            font-size: 0.875rem;
            transition: var(--transition-medium);
            background: white;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-600);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
            outline: none;
        }

        .btn-apply {
            background: linear-gradient(135deg, var(--primary-600), #8b5cf6);
            color: white;
            border: none;
            padding: var(--space-md) var(--space-xl);
            border-radius: var(--radius-lg);
            font-weight: 600;
            transition: var(--transition-medium);
        }

        .btn-apply:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .btn-reset {
            background: transparent;
            color: var(--gray-600);
            border: 2px solid #e5e7eb;
            padding: var(--space-md) var(--space-xl);
            border-radius: var(--radius-lg);
            font-weight: 600;
            transition: var(--transition-medium);
        }

        .btn-reset:hover {
            background: #f9fafb;
            border-color: var(--gray-600);
        }

        /* Vehicles Grid */
        .vehicles-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: var(--space-xl);
            margin-bottom: var(--space-xl);
        }

        .vehicle-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-xl);
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: var(--shadow-lg);
            transition: var(--transition-medium);
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .vehicle-card:hover {
            transform: translateY(-8px);
            box-shadow: var(--shadow-xl);
        }

        .vehicle-image {
            position: relative;
            height: 180px;
            background: linear-gradient(135deg, var(--primary-100), var(--primary-50));
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .vehicle-icon {
            font-size: 4rem;
            color: var(--primary-600);
            filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.1));
        }

        .vehicle-badge {
            position: absolute;
            top: var(--space-md);
            right: var(--space-md);
        }

        .badge {
            font-size: 0.75rem;
            padding: var(--space-sm) var(--space-md);
            border-radius: var(--radius-lg);
            font-weight: 600;
        }

        .badge-success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .badge-warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
        }

        .badge-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .vehicle-info {
            padding: var(--space-xl);
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .vehicle-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--space-lg);
        }

        .vehicle-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
        }

        .vehicle-id {
            font-size: 0.875rem;
            color: var(--gray-600);
            background: var(--gray-100);
            padding: var(--space-xs) var(--space-sm);
            border-radius: var(--radius-lg);
        }

        .vehicle-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--space-md);
            margin-bottom: var(--space-lg);
        }

        .detail-item {
            display: flex;
            align-items: center;
            gap: var(--space-sm);
            font-size: 0.875rem;
            color: var(--gray-600);
        }

        .detail-icon {
            color: var(--primary-600);
            font-size: 1rem;
        }

        .vehicle-actions {
            margin-top: auto;
            display: flex;
            gap: var(--space-sm);
        }

        .btn-unlock {
            flex: 1;
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border: none;
            padding: var(--space-md);
            border-radius: var(--radius-lg);
            font-weight: 600;
            transition: var(--transition-medium);
        }

        .btn-unlock:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .btn-unlock:disabled {
            background: #d1d5db;
            cursor: not-allowed;
            transform: none;
        }

        .btn-details {
            background: transparent;
            color: var(--primary-600);
            border: 2px solid var(--primary-600);
            padding: var(--space-md);
            border-radius: var(--radius-lg);
            font-weight: 600;
            transition: var(--transition-medium);
            min-width: 44px;
        }

        .btn-details:hover {
            background: var(--primary-600);
            color: white;
        }

        /* Loading and Empty States */
        .loading-card, .empty-state {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-xl);
            padding: var(--space-3xl);
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: var(--shadow-lg);
            grid-column: 1 / -1;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid #f3f4f6;
            border-top: 4px solid var(--primary-600);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto var(--space-lg);
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .empty-icon {
            font-size: 4rem;
            color: var(--gray-600);
            margin-bottom: var(--space-lg);
        }

        .empty-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--gray-900);
            margin-bottom: var(--space-sm);
        }

        .empty-description {
            color: var(--gray-600);
            margin-bottom: var(--space-lg);
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .container-fluid {
                padding: var(--space-md);
            }

            .hero-section {
                padding: var(--space-xl);
                text-align: center;
            }

            .hero-title {
                font-size: 2rem;
                justify-content: center;
            }

            .hero-stats {
                justify-content: center;
            }

            .filters-grid {
                grid-template-columns: 1fr;
            }

            .vehicles-grid {
                grid-template-columns: 1fr;
                gap: var(--space-lg);
            }

            .vehicle-details {
                grid-template-columns: 1fr;
            }

            .vehicle-actions {
                flex-direction: column;
            }
        }
    </style>
}

<!-- Error Alert -->
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <strong>Attenzione:</strong> @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Hero Section -->
<div class="hero-section">
    <div class="hero-content">
        <h1 class="hero-title">
            <i class="fas fa-bicycle"></i>
            Trova il Tuo Mezzo
        </h1>
        <p class="hero-subtitle">Scopri tutti i mezzi disponibili nella tua zona e inizia il tuo viaggio</p>
    </div>
    
    <div class="hero-stats">
        <div class="hero-stat">
            <span class="hero-stat-value" id="availableCount">@Model.AvailableVehicles</span>
            <span class="hero-stat-label">Disponibili</span>
        </div>
        <div class="hero-stat">
            <span class="hero-stat-value">€0,15</span>
            <span class="hero-stat-label">min</span>
        </div>
    </div>
</div>



<!-- Filters Section -->
<div class="filters-section">
    <div class="filters-header">
        <h3 class="filters-title">
            <i class="fas fa-filter"></i>
            Filtri di Ricerca
        </h3>
        <div class="d-flex gap-2">
            <button class="btn btn-apply" onclick="applyFilters()">
                <i class="fas fa-search me-2"></i>
                Applica
            </button>
            <button class="btn btn-reset" onclick="resetFilters()">
                <i class="fas fa-refresh me-2"></i>
                Reset
            </button>
        </div>
    </div>
    
    <div class="filters-grid">
        <div class="filter-group">
            <label class="filter-label">Tipo Mezzo</label>
            <select class="form-select" id="vehicleType">
                <option value="">Tutti i mezzi</option>
                <option value="0">Bicicletta</option>
                <option value="1">Scooter</option>
                <option value="2">Auto Elettrica</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label class="filter-label">Stato</label>
            <select class="form-select" id="status">
                <option value="">Tutti gli stati</option>
                <option value="0">Disponibile</option>
                <option value="1">In Uso</option>
                <option value="2">Manutenzione</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label class="filter-label">Batteria Min (%)</label>
            <input type="range" class="form-control" id="batteryMin" min="0" max="100" value="20">
            <small class="text-muted">Batteria >= <span id="batteryValue">20</span>%</small>
        </div>
        
        <div class="filter-group">
            <label class="filter-label">Ricerca</label>
            <input type="text" class="form-control" id="searchTerm" placeholder="ID, modello o posizione...">
        </div>
    </div>
</div>

<!-- Vehicles Grid -->
<div class="vehicles-grid" id="vehiclesGrid">
    @if (Model.Vehicles?.Any() == true)
    {
        @foreach (var vehicle in Model.Vehicles)
        {
            <div class="vehicle-card" data-type="@((int)vehicle.Tipo)" data-status="@((int)vehicle.Stato)" data-battery="@(vehicle.LivelloBatteria ?? 0)">
                <div class="vehicle-image">
                    <i class="vehicle-icon fas @GetVehicleIcon(vehicle.Tipo)"></i>
                    <div class="vehicle-badge">
                        <span class="badge @GetStatusBadgeClass(vehicle.Stato)">@GetStatusDisplayName(vehicle.Stato)</span>
                    </div>
                </div>
                
                <div class="vehicle-info">
                    <div class="vehicle-header">
                        <h4 class="vehicle-title">@vehicle.Modello</h4>
                        <span class="vehicle-id">#@vehicle.Id</span>
                    </div>
                    
                    <div class="vehicle-details">
                        @if (vehicle.IsElettrico && vehicle.LivelloBatteria.HasValue)
                        {
                            <div class="detail-item">
                                <i class="detail-icon fas fa-battery-three-quarters" style="color: @GetBatteryColor(vehicle.LivelloBatteria.Value)"></i>
                                <span>@vehicle.LivelloBatteria%</span>
                            </div>
                        }
                        else
                        {
                            <div class="detail-item">
                                <i class="detail-icon fas fa-gas-pump"></i>
                                <span>Manuale</span>
                            </div>
                        }
                        
                        <div class="detail-item">
                            <i class="detail-icon fas fa-map-marker-alt"></i>
                            <span>@(vehicle.ParcheggioId.HasValue ? $"Parcheggio #{vehicle.ParcheggioId}" : "N/A")</span>
                        </div>
                        
                        <div class="detail-item">
                            <i class="detail-icon fas fa-euro-sign"></i>
                            <span>€@vehicle.TariffaPerMinuto/min</span>
                        </div>
                        
                        <div class="detail-item">
                            <i class="detail-icon fas fa-tag"></i>
                            <span>@vehicle.Tipo.ToString()</span>
                        </div>
                    </div>
                    
                    <div class="vehicle-actions">
                        <button class="btn-unlock @(vehicle.Stato != VehicleStatus.Disponibile ? "disabled" : "")" 
                                @(vehicle.Stato != VehicleStatus.Disponibile ? "disabled" : "")
                                onclick="unlockVehicle(@vehicle.Id)">
                            <i class="fas @(vehicle.Stato == VehicleStatus.Disponibile ? "fa-unlock" : "fa-lock") me-2"></i>
                            @(vehicle.Stato == VehicleStatus.Disponibile ? "Sblocca" : GetStatusDisplayName(vehicle.Stato))
                        </button>
                        <button class="btn-details" onclick="showVehicleDetails(@vehicle.Id)" title="Dettagli">
                            <i class="fas fa-info"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="empty-state">
            <i class="empty-icon fas fa-search"></i>
            <h3 class="empty-title">Nessun mezzo disponibile</h3>
            <p class="empty-description">Al momento non ci sono mezzi disponibili. Controlla più tardi o contatta il supporto.</p>
            <button class="btn btn-apply" onclick="window.location.reload()">
                <i class="fas fa-refresh me-2"></i>
                Ricarica Pagina
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Initialize filters
        document.addEventListener('DOMContentLoaded', function() {
            const batterySlider = document.getElementById('batteryMin');
            const batteryValue = document.getElementById('batteryValue');
            
            batterySlider.addEventListener('input', function() {
                batteryValue.textContent = this.value;
            });
        });

        // Filter functions
        function applyFilters() {
            const vehicleType = document.getElementById('vehicleType').value;
            const status = document.getElementById('status').value;
            const batteryMin = parseInt(document.getElementById('batteryMin').value);
            const searchTerm = document.getElementById('searchTerm').value.toLowerCase();
            
            const cards = document.querySelectorAll('.vehicle-card');
            let visibleCount = 0;
            
            cards.forEach(card => {
                const cardType = card.getAttribute('data-type');
                const cardStatus = card.getAttribute('data-status');
                const cardBattery = parseInt(card.getAttribute('data-battery'));
                const cardText = card.textContent.toLowerCase();
                
                let show = true;
                
                // Filter by type
                if (vehicleType && cardType !== vehicleType) {
                    show = false;
                }
                
                // Filter by status
                if (status && cardStatus !== status) {
                    show = false;
                }
                
                // Filter by battery
                if (cardBattery < batteryMin) {
                    show = false;
                }
                
                // Filter by search term
                if (searchTerm && !cardText.includes(searchTerm)) {
                    show = false;
                }
                
                card.style.display = show ? 'block' : 'none';
                if (show) visibleCount++;
            });
            
            // Update available count
            document.getElementById('availableCount').textContent = visibleCount;
        }

        function resetFilters() {
            document.getElementById('vehicleType').value = '';
            document.getElementById('status').value = '';
            document.getElementById('batteryMin').value = '20';
            document.getElementById('batteryValue').textContent = '20';
            document.getElementById('searchTerm').value = '';
            
            // Show all cards
            const cards = document.querySelectorAll('.vehicle-card');
            cards.forEach(card => {
                card.style.display = 'block';
            });
            
            // Update count
            document.getElementById('availableCount').textContent = @Model.AvailableVehicles;
        }

        // Vehicle actions
        async function unlockVehicle(vehicleId) {
            if (confirm('Sei sicuro di voler sbloccare questo mezzo?')) {
                try {
                    const response = await fetch(`/api/vehicles/${vehicleId}/unlock`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        }
                    });
                    
                    if (response.ok) {
                        alert('Mezzo sbloccato con successo!');
                        window.location.reload();
                    } else {
                        alert('Errore nello sblocco del mezzo. Riprova.');
                    }
                } catch (error) {
                    console.error('Error unlocking vehicle:', error);
                    alert('Errore di connessione. Riprova.');
                }
            }
        }

        function showVehicleDetails(vehicleId) {
            window.location.href = `/Vehicles/Details/${vehicleId}`;
        }
    </script>
}

@functions {
    private string GetVehicleIcon(VehicleType tipo)
    {
        return tipo switch
        {
            VehicleType.Bicicletta => "fa-bicycle",
            VehicleType.Scooter => "fa-motorcycle", 
            VehicleType.Auto => "fa-car",
            VehicleType.Monopattino => "fa-skating",
            VehicleType.EBike => "fa-bicycle",
            _ => "fa-question"
        };
    }
    
    private string GetStatusBadgeClass(VehicleStatus stato)
    {
        return stato switch
        {
            VehicleStatus.Disponibile => "badge-success",
            VehicleStatus.InUso => "badge-warning",
            VehicleStatus.Manutenzione => "badge-danger",
            VehicleStatus.Fuori_Servizio => "badge-danger",
            _ => "badge-secondary"
        };
    }
    
    private string GetStatusDisplayName(VehicleStatus stato)
    {
        return stato switch
        {
            VehicleStatus.Disponibile => "Disponibile",
            VehicleStatus.InUso => "In Uso",
            VehicleStatus.Manutenzione => "Manutenzione",
            VehicleStatus.Fuori_Servizio => "Fuori Servizio",
            _ => stato.ToString()
        };
    }
    
    private string GetBatteryColor(int battery)
    {
        if (battery >= 70) return "#10b981";
        if (battery >= 30) return "#f59e0b";
        return "#ef4444";
    }
}