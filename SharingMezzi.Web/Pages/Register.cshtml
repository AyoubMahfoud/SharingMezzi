@page "/Register"
@model SharingMezzi.Web.Pages.RegisterModel
@{
    ViewData["Title"] = "Registrati";
    Layout = null;
}

<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="light dark" />
    <title>@ViewData["Title"] - SharingMezzi</title>
    
    <!-- Bootstrap 5.3 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        /* CSS Variables */
        :root {
            --primary-600: #6366f1;
            --primary-100: #e0e7ff;
            --primary-50: #f0f4ff;
            --gray-900: #111827;
            --gray-600: #4b5563;
            --gray-100: #f3f4f6;
            --space-xs: 0.25rem;
            --space-sm: 0.5rem;
            --space-md: 1rem;
            --space-lg: 1.5rem;
            --space-xl: 2rem;
            --space-2xl: 2.5rem;
            --space-3xl: 3rem;
            --radius-lg: 12px;
            --radius-xl: 20px;
            --radius-2xl: 24px;
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1);
            --transition-medium: all 0.3s ease;
            --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: var(--font-sans);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background-attachment: fixed;
            color: var(--gray-900);
            padding: var(--space-xl) var(--space-md);
        }

        .auth-container {
            width: 100%;
            max-width: 580px;
        }

        .auth-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--radius-2xl);
            padding: var(--space-3xl);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: var(--shadow-xl);
            transition: var(--transition-medium);
            animation: fadeInUp 0.6s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .auth-header {
            text-align: center;
            margin-bottom: var(--space-3xl);
        }

        .auth-logo {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, var(--primary-600), #8b5cf6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto var(--space-lg);
            box-shadow: var(--shadow-lg);
        }

        .auth-logo i {
            font-size: 2.5rem;
            color: white;
        }

        .auth-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: var(--space-sm);
        }

        .auth-subtitle {
            color: var(--gray-600);
            font-size: 1.1rem;
            font-weight: 400;
        }

        .form-group {
            margin-bottom: var(--space-lg);
        }

        .form-label {
            display: block;
            margin-bottom: var(--space-sm);
            font-weight: 600;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        .input-group {
            position: relative;
        }

        .input-group-text {
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 50px;
            background: transparent;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray-600);
            z-index: 2;
        }

        .form-control {
            width: 100%;
            padding: var(--space-md) var(--space-md) var(--space-md) 50px;
            border: 2px solid #e5e7eb;
            border-radius: var(--radius-lg);
            font-size: 1rem;
            transition: var(--transition-medium);
            background: white;
            font-family: var(--font-sans);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-600);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .form-control::placeholder {
            color: #9ca3af;
        }

        .form-check {
            display: flex;
            align-items: flex-start;
            gap: var(--space-sm);
            margin-bottom: var(--space-lg);
        }

        .form-check-input {
            width: 18px;
            height: 18px;
            border: 2px solid #d1d5db;
            border-radius: 4px;
            transition: var(--transition-medium);
            margin-top: 2px;
            flex-shrink: 0;
        }

        .form-check-input:checked {
            background-color: var(--primary-600);
            border-color: var(--primary-600);
        }

        .form-check-label {
            color: var(--gray-600);
            font-size: 0.875rem;
            cursor: pointer;
            line-height: 1.4;
        }

        .form-check-label a {
            color: var(--primary-600);
            text-decoration: none;
            font-weight: 500;
        }

        .form-check-label a:hover {
            text-decoration: underline;
        }

        .btn-auth {
            width: 100%;
            padding: var(--space-md) var(--space-xl);
            background: linear-gradient(135deg, var(--primary-600), #8b5cf6);
            color: white;
            border: none;
            border-radius: var(--radius-lg);
            font-size: 1rem;
            font-weight: 600;
            transition: var(--transition-medium);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: var(--space-sm);
            margin-bottom: var(--space-lg);
        }

        .btn-auth:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
            background: linear-gradient(135deg, #5b21b6, var(--primary-600));
        }

        .btn-auth:active {
            transform: translateY(0);
        }

        .btn-auth:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .auth-links {
            text-align: center;
        }

        .auth-links a {
            color: var(--primary-600);
            text-decoration: none;
            font-weight: 500;
            transition: var(--transition-medium);
        }

        .auth-links a:hover {
            color: #5b21b6;
            text-decoration: underline;
        }

        .auth-divider {
            text-align: center;
            margin: var(--space-xl) 0;
            position: relative;
            color: var(--gray-600);
            font-size: 0.875rem;
        }

        .auth-divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: #e5e7eb;
            z-index: 1;
        }

        .auth-divider span {
            background: white;
            padding: 0 var(--space-md);
            position: relative;
            z-index: 2;
        }

        .btn-back {
            position: absolute;
            top: var(--space-xl);
            left: var(--space-xl);
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray-600);
            text-decoration: none;
            transition: var(--transition-medium);
        }

        .btn-back:hover {
            background: white;
            color: var(--primary-600);
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .alert {
            border-radius: var(--radius-lg);
            border: none;
            margin-bottom: var(--space-lg);
        }

        .alert-danger {
            background: linear-gradient(135deg, #fef2f2, #fee2e2);
            color: #dc2626;
        }

        .alert-success {
            background: linear-gradient(135deg, #f0fdf4, #dcfce7);
            color: #16a34a;
        }

        /* Two column layout for form fields */
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--space-lg);
        }

        /* Password strength indicator */
        .password-strength {
            margin-top: var(--space-sm);
            height: 4px;
            background: #e5e7eb;
            border-radius: 2px;
            overflow: hidden;
        }

        .password-strength-bar {
            height: 100%;
            transition: var(--transition-medium);
            border-radius: 2px;
        }

        .password-strength.weak .password-strength-bar {
            width: 33%;
            background: #ef4444;
        }

        .password-strength.medium .password-strength-bar {
            width: 66%;
            background: #f59e0b;
        }

        .password-strength.strong .password-strength-bar {
            width: 100%;
            background: #10b981;
        }

        .password-hint {
            font-size: 0.75rem;
            color: var(--gray-600);
            margin-top: var(--space-xs);
        }

        /* Responsive */
        @@media (max-width: 768px) {
            body {
                padding: var(--space-md);
            }

            .auth-container {
                max-width: 100%;
            }

            .auth-card {
                padding: var(--space-xl);
            }

            .auth-title {
                font-size: 1.75rem;
            }

            .btn-back {
                top: var(--space-md);
                left: var(--space-md);
            }

            .form-row {
                grid-template-columns: 1fr;
                gap: var(--space-md);
            }
        }

        /* Loading spinner */
        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Validation styles */
        .text-danger {
            color: #dc2626 !important;
            font-size: 0.875rem;
            margin-top: var(--space-xs);
        }
    </style>
</head>
<body>
    <!-- Back Button -->
    <a href="/" class="btn-back" title="Torna alla home">
        <i class="fas fa-arrow-left"></i>
    </a>

    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <div class="auth-logo">
                    <i class="fas fa-user-plus"></i>
                </div>
                <h1 class="auth-title">Unisciti a noi!</h1>
                <p class="auth-subtitle">Crea il tuo account SharingMezzi in pochi semplici passi</p>
            </div>

            <form method="post" class="auth-form" id="registerForm">
                @Html.AntiForgeryToken()
                
                @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        @Model.ErrorMessage
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(Model.SuccessMessage))
                {
                    <div class="alert alert-success" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        @Model.SuccessMessage
                    </div>
                }
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="RegisterRequest_Nome" class="form-label">Nome</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-user"></i>
                            </span>
                            <input name="RegisterRequest.Nome"
                                   id="RegisterRequest_Nome"
                                   type="text"
                                   class="form-control" 
                                   placeholder="Il tuo nome"
                                   value="@Model.RegisterRequest?.Nome"
                                   required>
                        </div>
                        <span asp-validation-for="RegisterRequest.Nome" class="text-danger"></span>
                    </div>
                    
                    <div class="form-group">
                        <label for="RegisterRequest_Cognome" class="form-label">Cognome</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-user"></i>
                            </span>
                            <input name="RegisterRequest.Cognome"
                                   id="RegisterRequest_Cognome"
                                   type="text"
                                   class="form-control" 
                                   placeholder="Il tuo cognome"
                                   value="@Model.RegisterRequest?.Cognome"
                                   required>
                        </div>
                        <span asp-validation-for="RegisterRequest.Cognome" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group">
                    <label for="RegisterRequest_Email" class="form-label">Indirizzo Email</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-envelope"></i>
                        </span>
                        <input name="RegisterRequest.Email"
                               id="RegisterRequest_Email"
                               type="email"
                               class="form-control" 
                               placeholder="la.tua.email@esempio.com"
                               value="@Model.RegisterRequest?.Email"
                               required>
                    </div>
                    <span asp-validation-for="RegisterRequest.Email" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="RegisterRequest_Telefono" class="form-label">Numero di Telefono <span class="text-muted">(opzionale)</span></label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-phone"></i>
                        </span>
                        <input name="RegisterRequest.Telefono"
                               id="RegisterRequest_Telefono"
                               type="tel"
                               class="form-control" 
                               placeholder="+39 123 456 7890"
                               value="@Model.RegisterRequest?.Telefono">
                    </div>
                    <span asp-validation-for="RegisterRequest.Telefono" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="RegisterRequest_Password" class="form-label">Password</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-lock"></i>
                        </span>
                        <input name="RegisterRequest.Password"
                               id="RegisterRequest_Password"
                               type="password"
                               class="form-control" 
                               placeholder="Crea una password sicura"
                               required>
                    </div>
                    <div class="password-strength d-none" id="passwordStrength">
                        <div class="password-strength-bar"></div>
                    </div>
                    <div class="password-hint">
                        Almeno 6 caratteri per una password sicura
                    </div>
                    <span asp-validation-for="RegisterRequest.Password" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="RegisterRequest_ConfirmPassword" class="form-label">Conferma Password</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-lock"></i>
                        </span>
                        <input name="RegisterRequest.ConfirmPassword"
                               id="RegisterRequest_ConfirmPassword"
                               type="password"
                               class="form-control" 
                               placeholder="Ripeti la password"
                               required>
                    </div>
                    <span asp-validation-for="RegisterRequest.ConfirmPassword" class="text-danger"></span>
                </div>

                <div class="form-check">
                    <input name="RegisterRequest.AcceptTerms"
                           id="RegisterRequest_AcceptTerms"
                           class="form-check-input" 
                           type="checkbox"
                           value="true"
                           required>
                    <input name="RegisterRequest.AcceptTerms" type="hidden" value="false">
                    <label for="RegisterRequest_AcceptTerms" class="form-check-label">
                        Accetto i <a href="/terms" target="_blank">Termini di Servizio</a> 
                        e l'<a href="/privacy" target="_blank">Informativa sulla Privacy</a> 
                        di SharingMezzi
                    </label>
                    <span asp-validation-for="RegisterRequest.AcceptTerms" class="text-danger"></span>
                </div>

                <button type="submit" class="btn-auth" id="registerButton">
                    <i class="fas fa-user-plus"></i>
                    <span class="btn-text">Crea Account</span>
                    <div class="spinner d-none"></div>
                </button>
            </form>

            <div class="auth-links">
                <div class="auth-divider">
                    <span>oppure</span>
                </div>
                
                <p class="mb-0">
                    Hai già un account?
                    <a href="/Login" class="fw-semibold">
                        Accedi qui
                    </a>
                </p>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Register page loaded');
            
            const form = document.getElementById('registerForm');
            const submitBtn = document.getElementById('registerButton');
            const btnText = submitBtn.querySelector('.btn-text');
            const spinner = submitBtn.querySelector('.spinner');
            const passwordField = document.querySelector('[name="RegisterRequest.Password"]');
            const confirmPasswordField = document.querySelector('[name="RegisterRequest.ConfirmPassword"]');
            const passwordStrength = document.getElementById('passwordStrength');
            
            console.log('Form elements found:', {
                form: !!form,
                submitBtn: !!submitBtn,
                passwordField: !!passwordField,
                confirmPasswordField: !!confirmPasswordField
            });
            
            // Add click listener to submit button for debugging
            if (submitBtn) {
                submitBtn.addEventListener('click', function(e) {
                    console.log('🔘 Submit button clicked');
                    console.log('Button type:', submitBtn.type);
                    console.log('Form:', submitBtn.form);
                    console.log('Form valid:', form.checkValidity());
                    
                    // Check if button is inside form
                    const isInsideForm = form.contains(submitBtn);
                    console.log('Button inside form:', isInsideForm);
                    
                    // Check form data
                    const formData = new FormData(form);
                    console.log('📋 Form data:');
                    for (let [key, value] of formData.entries()) {
                        if (key.includes('Password')) {
                            console.log(`  ${key}: [${value.length} chars]`);
                        } else {
                            console.log(`  ${key}: ${value}`);
                        }
                    }
                    
                    // Check form HTML structure
                    console.log('Form HTML:', form.outerHTML.substring(0, 200) + '...');
                    
                    // Check all input fields
                    const inputs = form.querySelectorAll('input');
                    console.log('All inputs in form:', inputs.length);
                    inputs.forEach((input, index) => {
                        console.log(`  Input ${index}: name="${input.name}", value="${input.value}", type="${input.type}"`);
                    });
                });
            }
            
            // Password strength checker
            if (passwordField) {
                passwordField.addEventListener('input', function() {
                    const password = this.value;
                    const strength = checkPasswordStrength(password);
                    
                    if (password.length > 0) {
                        passwordStrength.classList.remove('d-none');
                        passwordStrength.className = `password-strength ${strength}`;
                    } else {
                        passwordStrength.classList.add('d-none');
                    }
                });
            }
            
            // Password confirmation validation
            if (confirmPasswordField) {
                confirmPasswordField.addEventListener('input', function() {
                    const password = passwordField.value;
                    const confirmPassword = this.value;
                    
                    if (confirmPassword.length > 0) {
                        if (password === confirmPassword) {
                            this.setCustomValidity('');
                            this.classList.remove('is-invalid');
                            this.classList.add('is-valid');
                        } else {
                            this.setCustomValidity('Le password non corrispondono');
                            this.classList.remove('is-valid');
                            this.classList.add('is-invalid');
                        }
                    }
                });
            }
            
            // Form submission with detailed logging
            if (form) {
                form.addEventListener('submit', function(e) {
                    console.log('📤 Form submit event triggered');
                    console.log('Event preventDefault called:', e.defaultPrevented);
                    
                    // TEMPORARY: Alert to test if this fires
                    alert('Form submit event fired! Check console for details.');
                    
                    // Validate required fields
                    const requiredFields = form.querySelectorAll('[required]');
                    let missingFields = [];
                    
                    requiredFields.forEach(field => {
                        if (!field.value.trim()) {
                            missingFields.push(field.name || field.id);
                        }
                    });
                    
                    if (missingFields.length > 0) {
                        console.log('❌ Missing required fields:', missingFields);
                        e.preventDefault();
                        alert('Compila tutti i campi obbligatori: ' + missingFields.join(', '));
                        return;
                    }
                    
                    // Check password match
                    if (passwordField && confirmPasswordField) {
                        if (passwordField.value !== confirmPasswordField.value) {
                            console.log('❌ Passwords do not match');
                            e.preventDefault();
                            alert('Le password non corrispondono');
                            confirmPasswordField.focus();
                            return;
                        }
                    }
                    
                    // Check terms acceptance
                    const termsCheckbox = form.querySelector('[name="RegisterRequest.AcceptTerms"]');
                    if (termsCheckbox && !termsCheckbox.checked) {
                        console.log('❌ Terms not accepted');
                        e.preventDefault();
                        alert('Devi accettare i termini di servizio');
                        termsCheckbox.focus();
                        return;
                    }
                    
                    console.log('✅ Form validation passed, submitting...');
                    
                    // Show loading state
                    if (submitBtn && btnText && spinner) {
                        submitBtn.disabled = true;
                        btnText.textContent = 'Creazione account...';
                        spinner.classList.remove('d-none');
                    }
                    
                    // Let the form submit naturally to the server
                    console.log('🚀 Form submitting to server...');
                });
            }
            
            // Auto-focus first field
            const firstField = document.querySelector('[name="RegisterRequest.Nome"]');
            if (firstField) {
                firstField.focus();
                console.log('👆 Focused first field');
            }
            
            function checkPasswordStrength(password) {
                let score = 0;
                
                // Length
                if (password.length >= 6) score++;
                if (password.length >= 10) score++;
                
                // Character types
                if (/[a-z]/.test(password)) score++;
                if (/[A-Z]/.test(password)) score++;
                if (/[0-9]/.test(password)) score++;
                if (/[^A-Za-z0-9]/.test(password)) score++;
                
                if (score < 3) return 'weak';
                if (score < 5) return 'medium';
                return 'strong';
            }
        });
    </script>
</body>
</html>