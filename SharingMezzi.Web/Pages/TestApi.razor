@page "/test-api"
@using SharingMezzi.Web.Services
@inject IApiService ApiService
@inject ILogger<TestApiModel> Logger

<h1>Test API Connection</h1>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h3>Test Results</h3>
            <div id="test-results">
                @if (TestResults.Any())
                {
                    @foreach (var result in TestResults)
                    {
                        <div class="alert @(result.Success ? "alert-success" : "alert-danger")">
                            <strong>@result.TestName:</strong> @result.Message
                            @if (!string.IsNullOrEmpty(result.Details))
                            {
                                <br><small>@result.Details</small>
                            }
                        </div>
                    }
                }
                else
                {
                    <p>No tests run yet. Click the button to test API connectivity.</p>
                }
            </div>
        </div>
        <div class="col-md-6">
            <h3>Test Controls</h3>
            <button class="btn btn-primary" @onclick="RunAllTests">Run All Tests</button>
            <button class="btn btn-secondary" @onclick="ClearResults">Clear Results</button>
            
            <hr>
            
            <h4>Manual Test</h4>
            <div class="form-group">
                <label>API Endpoint:</label>
                <input type="text" class="form-control" @bind="CustomEndpoint" placeholder="/api/auth/login" />
            </div>
            <button class="btn btn-info" @onclick="TestCustomEndpoint">Test Custom Endpoint</button>
        </div>
    </div>
</div>

@code {
    private List<TestResult> TestResults = new();
    private string CustomEndpoint = "/api/auth/login";

    protected override async Task OnInitializedAsync()
    {
        await RunAllTests();
    }

    private async Task RunAllTests()
    {
        TestResults.Clear();
        
        // Test 1: Basic connectivity
        await TestBasicConnectivity();
        
        // Test 2: Auth endpoint
        await TestAuthEndpoint();
        
        // Test 3: Test endpoint
        await TestTestEndpoint();
        
        StateHasChanged();
    }

    private async Task TestBasicConnectivity()
    {
        try
        {
            Logger.LogInformation("Testing basic API connectivity...");
            
            using var httpClient = new HttpClient();
            var response = await httpClient.GetAsync("http://localhost:5000");
            
            TestResults.Add(new TestResult 
            { 
                TestName = "Basic Connectivity", 
                Success = response.IsSuccessStatusCode, 
                Message = $"HTTP {(int)response.StatusCode} - {response.StatusCode}",
                Details = $"Response received. Status: {response.StatusCode}"
            });
        }
        catch (Exception ex)
        {
            TestResults.Add(new TestResult 
            { 
                TestName = "Basic Connectivity", 
                Success = false, 
                Message = "Connection failed", 
                Details = ex.Message 
            });
        }
    }

    private async Task TestAuthEndpoint()
    {
        try
        {
            Logger.LogInformation("Testing auth endpoint...");
            
            using var httpClient = new HttpClient();
            var response = await httpClient.GetAsync("http://localhost:5000/api/auth/login");
            
            TestResults.Add(new TestResult 
            { 
                TestName = "Auth Endpoint (/api/auth/login)", 
                Success = response.StatusCode != System.Net.HttpStatusCode.NotFound, 
                Message = $"HTTP {(int)response.StatusCode} - {response.StatusCode}",
                Details = $"Should return 405 (Method Not Allowed) for GET request, got {response.StatusCode}"
            });
        }
        catch (Exception ex)
        {
            TestResults.Add(new TestResult 
            { 
                TestName = "Auth Endpoint (/api/auth/login)", 
                Success = false, 
                Message = "Request failed", 
                Details = ex.Message 
            });
        }
    }

    private async Task TestTestEndpoint()
    {
        try
        {
            Logger.LogInformation("Testing test endpoint...");
            
            var result = await ApiService.GetAsync<dynamic>("api/test");
            
            TestResults.Add(new TestResult 
            { 
                TestName = "Test Endpoint (/api/test)", 
                Success = result != null, 
                Message = result != null ? "Success" : "Failed",
                Details = result?.ToString() ?? "No response"
            });
        }
        catch (Exception ex)
        {
            TestResults.Add(new TestResult 
            { 
                TestName = "Test Endpoint (/api/test)", 
                Success = false, 
                Message = "Request failed", 
                Details = ex.Message 
            });
        }
    }

    private async Task TestCustomEndpoint()
    {
        try
        {
            Logger.LogInformation($"Testing custom endpoint: {CustomEndpoint}");
            
            using var httpClient = new HttpClient();
            var response = await httpClient.GetAsync($"http://localhost:5000{CustomEndpoint}");
            
            TestResults.Add(new TestResult 
            { 
                TestName = $"Custom Endpoint ({CustomEndpoint})", 
                Success = response.IsSuccessStatusCode, 
                Message = $"HTTP {(int)response.StatusCode} - {response.StatusCode}",
                Details = await response.Content.ReadAsStringAsync()
            });
        }
        catch (Exception ex)
        {
            TestResults.Add(new TestResult 
            { 
                TestName = $"Custom Endpoint ({CustomEndpoint})", 
                Success = false, 
                Message = "Request failed", 
                Details = ex.Message 
            });
        }
        
        StateHasChanged();
    }

    private void ClearResults()
    {
        TestResults.Clear();
        StateHasChanged();
    }

    public class TestResult
    {
        public string TestName { get; set; } = "";
        public bool Success { get; set; }
        public string Message { get; set; } = "";
        public string Details { get; set; } = "";
    }
}
