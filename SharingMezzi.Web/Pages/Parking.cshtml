@page
@model SharingMezzi.Web.Pages.ParkingModel
@using SharingMezzi.Web.Models
@{
    ViewData["Title"] = "Parcheggi";
    Layout = null;
}
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="light dark" />
    <title>@ViewData["Title"] - SharingMezzi</title>

    <!-- Bootstrap 5.3 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">

    <!-- Page-specific styles moved to external CSS to avoid Razor parsing issues -->
    <link rel="stylesheet" href="~/css/parking.css" asp-append-version="true" />
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-light position-fixed w-100" style="top: 0; z-index: 1000; background: white; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <div class="container-fluid px-4">
            <a class="navbar-brand fw-bold" href="/">
                <i class="fas fa-bicycle text-primary me-2"></i>
                SharingMezzi
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <div class="navbar-nav ms-auto">
                    <a href="/" class="nav-link me-3">
                        <i class="fas fa-home me-1"></i>
                        Dashboard
                    </a>
                    <a href="/Vehicles" class="nav-link me-3">
                        <i class="fas fa-bicycle me-1"></i>
                        Mezzi
                    </a>
                    <a href="/Parking" class="nav-link active me-3">
                        <i class="fas fa-parking me-1"></i>
                        Parcheggi
                    </a>
                    <a href="/Login" class="btn btn-outline-primary me-2">Accedi</a>
                    <a href="/Register" class="btn btn-primary">Registrati</a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content" style="margin-top: 100px; padding: 0 1rem;">
        <div class="container-fluid">
            <!-- Page Header -->
            <div class="page-header-section animate-fade-in-up mb-4">
                <div class="d-flex justify-content-between align-items-center flex-wrap">
                    <div>
                        <h1 class="page-title">
                            <i class="fas fa-parking text-primary"></i>
                            Parcheggi
                        </h1>
                        <p class="page-subtitle">Trova i parcheggi disponibili nelle vicinanze</p>
                    </div>
                    <button class="btn btn-primary" onclick="refreshParkings()">
                        <i class="fas fa-sync-alt me-2"></i> Aggiorna
                    </button>
                </div>
            </div>

            <!-- Error Message -->
            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @Model.ErrorMessage
                </div>
            }

            <!-- Loading State -->
            @if (Model.IsLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Caricamento...</span>
                    </div>
                    <p class="mt-2">Caricamento parcheggi...</p>
                </div>
            }
            else
            {
                <!-- Stats Cards -->
                <div class="row g-4 mb-4">
                    <div class="col-xl-3 col-lg-6">
                        <div class="stat-card text-center">
                            <div class="stat-icon">
                                <i class="fas fa-parking"></i>
                            </div>
                            <div class="stat-value" id="totalParkings">@Model.GetTotalParkings()</div>
                            <div class="stat-label">Parcheggi Totali</div>
                            <div class="stat-change">
                                <i class="fas fa-arrow-up"></i>
                                <span>Disponibili</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-xl-3 col-lg-6">
                        <div class="stat-card text-center">
                            <div class="stat-icon">
                                <i class="fas fa-check-circle"></i>
                            </div>
                            <div class="stat-value" id="availableSpots">@Model.GetAvailableSpots()</div>
                            <div class="stat-label">Posti Liberi</div>
                            <div class="stat-change">
                                <i class="fas fa-arrow-up"></i>
                                <span>@{
                                    var percentage = Model.GetTotalCapacity() > 0 ? Math.Round((double)Model.GetAvailableSpots() / Model.GetTotalCapacity() * 100, 1) : 0;
                                }@percentage%</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-xl-3 col-lg-6">
                        <div class="stat-card text-center">
                            <div class="stat-icon">
                                <i class="fas fa-car"></i>
                            </div>
                            <div class="stat-value" id="occupiedSpots">@Model.GetOccupiedSpots()</div>
                            <div class="stat-label">Posti Occupati</div>
                            <div class="stat-change">
                                <i class="fas fa-chart-line"></i>
                                <span>In uso</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-xl-3 col-lg-6">
                        <div class="stat-card text-center">
                            <div class="stat-icon">
                                <i class="fas fa-percentage"></i>
                            </div>
                            <div class="stat-value" id="occupancyRate">@Model.GetOccupancyRate()%</div>
                            <div class="stat-label">Tasso Occupazione</div>
                            <div class="stat-change">
                                <i class="fas fa-trend-up"></i>
                                <span>Medio</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Search and Filters -->
                <div class="content-card mb-4">
                    <div class="mb-3">
                        <h3><i class="fas fa-search text-primary"></i> Ricerca e Filtri</h3>
                        <p class="text-muted mb-0">Filtra i parcheggi per trovare quello più adatto</p>
                    </div>
                    <div class="row g-3">
                        <div class="col-lg-4 col-md-6">
                            <label class="form-label">Cerca per nome o indirizzo</label>
                            <input type="text" class="form-control" id="searchInput" placeholder="Inserisci nome o indirizzo...">
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <label class="form-label">Disponibilità</label>
                            <select class="form-select" id="availabilityFilter">
                                <option value="">Tutti</option>
                                <option value="available">Solo disponibili</option>
                                <option value="full">Pieni</option>
                                <option value="low">Pochi posti</option>
                            </select>
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <label class="form-label">Ordina per</label>
                            <select class="form-select" id="sortFilter">
                                <option value="name">Nome</option>
                                <option value="availability">Disponibilità</option>
                                <option value="capacity">Capienza</option>
                                <option value="distance">Distanza</option>
                            </select>
                        </div>
                        <div class="col-lg-2 col-md-6">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                                <i class="fas fa-times"></i> Reset
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Parking Grid -->
                <div id="parkingGrid" class="row g-4">
                    @if (Model.Parkings.Any())
                    {
                        @foreach (var parking in Model.Parkings)
                        {
                            <div class="col-lg-6 col-xl-4" data-parking-id="@parking.Id">
                                <div class="content-card parking-card h-100">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <div class="flex-grow-1">
                                            <h5 class="mb-2">
                                                <i class="fas fa-parking text-primary me-2"></i>
                                                @parking.Nome
                                            </h5>
                                            <p class="text-muted mb-0">
                                                <i class="fas fa-map-marker-alt text-danger me-1"></i>
                                                @parking.Indirizzo
                                            </p>
                                        </div>
                                        <span class="badge @Model.GetAvailabilityClass(parking) fs-6">
                                            @parking.PostiLiberi/@parking.Capienza
                                        </span>
                                    </div>
                                    
                                    <div class="row text-center g-0 mb-3">
                                        <div class="col-4">
                                            <div class="parking-stat">
                                                <div class="parking-stat-value text-primary">@parking.Capienza</div>
                                                <div class="parking-stat-label">Capienza</div>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <div class="parking-stat">
                                                <div class="parking-stat-value text-success">@parking.PostiLiberi</div>
                                                <div class="parking-stat-label">Liberi</div>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <div class="parking-stat">
                                                <div class="parking-stat-value text-warning">@parking.PostiOccupati</div>
                                                <div class="parking-stat-label">Occupati</div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    @{
                                        var progressWidth = parking.Capienza > 0 ? (100 - (parking.PostiLiberi * 100.0 / parking.Capienza)) : 100;
                                    }
                                    <div class="progress mb-3" style="height: 8px;">
                                        <div class="progress-bar @Model.GetAvailabilityClass(parking)" 
                                             role="progressbar" 
                                             style="width: @progressWidth%"
                                             aria-valuenow="@progressWidth"
                                             aria-valuemin="0" 
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                    
                                    <div class="text-center mb-3">
                                        <small class="text-muted">
                                            <i class="@Model.GetAvailabilityIcon(parking) me-1"></i>
                                            @Model.GetAvailabilityStatus(parking)
                                        </small>
                                    </div>
                                    
                                    <div class="row g-2 mb-2">
                                        <div class="col-6">
                                            <button class="btn btn-primary w-100 btn-sm" onclick="viewParkingDetails(@parking.Id)">
                                                <i class="fas fa-info-circle me-1"></i> Dettagli
                                            </button>
                                        </div>
                                        <div class="col-6">
                                            <button class="btn btn-outline-success w-100 btn-sm" onclick="showDirections(@parking.Id)">
                                                <i class="fas fa-directions me-1"></i> Indicazioni
                                            </button>
                                        </div>
                                    </div>
                                    @if (parking.PostiLiberi > 0)
                                    {
                                        <button class="btn btn-success w-100 btn-sm" onclick="reserveSpot(@parking.Id)">
                                            <i class="fas fa-bookmark me-1"></i> Prenota Posto
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-secondary w-100 btn-sm" disabled>
                                            <i class="fas fa-ban me-1"></i> Parcheggio Pieno
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12">
                            <div class="content-card text-center py-5">
                                <i class="fas fa-parking fa-4x text-muted mb-3"></i>
                                <h4>Nessun parcheggio disponibile</h4>
                                <p class="text-muted mb-4">Non ci sono parcheggi disponibili in questo momento.</p>
                                <button class="btn btn-primary" onclick="window.location.reload()">
                                    <i class="fas fa-sync-alt me-2"></i> Ricarica Pagina
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Modal Dettagli -->
    <div class="modal fade" id="parkingDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-parking text-primary me-2"></i>
                        Dettagli Parcheggio
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="parkingDetailsContent">
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Caricamento...</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- JavaScript Sicuro e Robusto -->
    <script>
        class ParkingManager {
            constructor() {
                try {
                    // Parsing sicuro dei dati dal server con il tuo ParkingModel
                    const rawData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Parkings));
                    console.log('🔄 Dati ricevuti dal ParkingModel:', rawData);
                    
                    // Validazione e normalizzazione dati
                    this.parkings = this.validateAndNormalizeData(rawData);
                    this.filteredParkings = [...this.parkings];
                    
                    console.log(`✅ ParkingManager inizializzato con ${this.parkings.length} parcheggi validi`);
                    this.init();
                    
                } catch (error) {
                    console.error('❌ Errore inizializzazione ParkingManager:', error);
                    this.parkings = [];
                    this.filteredParkings = [];
                    this.showAlert('Errore nel caricamento dei dati parcheggi', 'danger');
                }
            }

            validateAndNormalizeData(rawData) {
                if (!Array.isArray(rawData)) {
                    console.warn('⚠️ Dati non sono un array, inizializzazione con array vuoto');
                    return [];
                }

                return rawData.map(parking => {
                    // Usa la struttura del tuo modello Parking
                    return {
                        id: parseInt(parking.Id || parking.id || 0),
                        nome: String(parking.Nome || parking.nome || 'Nome non disponibile'),
                        indirizzo: String(parking.Indirizzo || parking.indirizzo || 'Indirizzo non disponibile'),
                        capienza: parseInt(parking.Capienza || parking.capienza || 0),
                        postiLiberi: parseInt(parking.PostiLiberi || parking.postiLiberi || 0),
                        postiOccupati: parseInt(parking.PostiOccupati || parking.postiOccupati || 0)
                    };
                }).filter(parking => {
                    // Validazione
                    if (!parking.nome || parking.capienza <= 0) {
                        console.warn('⚠️ Parcheggio non valido:', parking);
                        return false;
                    }
                    
                    // Correzione logica
                    if (parking.postiLiberi + parking.postiOccupati > parking.capienza) {
                        console.warn(`⚠️ Correzione dati parcheggio ${parking.id}`);
                        parking.postiLiberi = Math.max(0, parking.capienza - parking.postiOccupati);
                    }
                    
                    console.log(`✅ Parcheggio validato: ${parking.nome} (${parking.postiLiberi}/${parking.capienza})`);
                    return true;
                });
            }

            init() {
                try {
                    this.setupEventListeners();
                    this.updateStats();
                    this.renderParkings();
                    console.log('✅ ParkingManager inizializzato completamente');
                } catch (error) {
                    console.error('❌ Errore durante init():', error);
                }
            }

            setupEventListeners() {
                try {
                    const searchInput = document.getElementById('searchInput');
                    const availabilityFilter = document.getElementById('availabilityFilter');
                    const sortFilter = document.getElementById('sortFilter');

                    if (searchInput) {
                        searchInput.addEventListener('input', () => this.filterParkings());
                    }
                    if (availabilityFilter) {
                        availabilityFilter.addEventListener('change', () => this.filterParkings());
                    }
                    if (sortFilter) {
                        sortFilter.addEventListener('change', () => this.sortParkings());
                    }

                    console.log('✅ Event listeners configurati');
                } catch (error) {
                    console.error('❌ Errore configurazione event listeners:', error);
                }
            }

            filterParkings() {
                try {
                    const searchInput = document.getElementById('searchInput');
                    const availabilityFilter = document.getElementById('availabilityFilter');
                    
                    const searchTerm = searchInput ? searchInput.value.toLowerCase().trim() : '';
                    const availability = availabilityFilter ? availabilityFilter.value : '';

                    this.filteredParkings = this.parkings.filter(parking => {
                        try {
                            let matchesSearch = true;
                            if (searchTerm) {
                                const nome = String(parking.nome || '').toLowerCase();
                                const indirizzo = String(parking.indirizzo || '').toLowerCase();
                                matchesSearch = nome.includes(searchTerm) || indirizzo.includes(searchTerm);
                            }
                            
                            let matchesAvailability = true;
                            if (availability === 'available') {
                                matchesAvailability = parking.postiLiberi > 0;
                            } else if (availability === 'full') {
                                matchesAvailability = parking.postiLiberi === 0;
                            } else if (availability === 'low') {
                                matchesAvailability = parking.postiLiberi > 0 && parking.postiLiberi <= parking.capienza * 0.2;
                            }

                            return matchesSearch && matchesAvailability;
                            
                        } catch (error) {
                            console.error('❌ Errore nel filtro singolo parcheggio:', error);
                            return false;
                        }
                    });

                    this.sortParkings();
                    this.renderParkings();
                    this.updateStats();
                    
                } catch (error) {
                    console.error('❌ Errore in filterParkings():', error);
                }
            }

            sortParkings() {
                try {
                    const sortFilter = document.getElementById('sortFilter');
                    const sortBy = sortFilter ? sortFilter.value : 'name';
                    
                    this.filteredParkings.sort((a, b) => {
                        switch (sortBy) {
                            case 'name':
                                return String(a.nome || '').localeCompare(String(b.nome || ''));
                            case 'availability':
                                return (b.postiLiberi || 0) - (a.postiLiberi || 0);
                            case 'capacity':
                                return (b.capienza || 0) - (a.capienza || 0);
                            default:
                                return 0;
                        }
                    });

                    this.renderParkings();
                } catch (error) {
                    console.error('❌ Errore in sortParkings():', error);
                }
            }

            renderParkings() {
                try {
                    const allCards = document.querySelectorAll('[data-parking-id]');
                    
                    allCards.forEach(card => {
                        const parkingId = parseInt(card.dataset.parkingId);
                        const isVisible = this.filteredParkings.some(p => p.id === parkingId);
                        card.style.display = isVisible ? 'block' : 'none';
                    });
                } catch (error) {
                    console.error('❌ Errore in renderParkings():', error);
                }
            }

            updateStats() {
                try {
                    const total = this.filteredParkings.length;
                    const free = this.filteredParkings.reduce((sum, p) => sum + (p.postiLiberi || 0), 0);
                    const occupied = this.filteredParkings.reduce((sum, p) => sum + (p.postiOccupati || 0), 0);
                    const capacity = this.filteredParkings.reduce((sum, p) => sum + (p.capienza || 0), 0);
                    const rate = capacity > 0 ? (occupied / capacity * 100).toFixed(1) : 0;

                    this.updateElementText('totalParkings', total);
                    this.updateElementText('availableSpots', free);
                    this.updateElementText('occupiedSpots', occupied);
                    this.updateElementText('occupancyRate', rate + '%');
                } catch (error) {
                    console.error('❌ Errore in updateStats():', error);
                }
            }

            updateElementText(elementId, value) {
                try {
                    const element = document.getElementById(elementId);
                    if (element) {
                        element.textContent = value;
                    }
                } catch (error) {
                    console.error(`❌ Errore aggiornamento elemento ${elementId}:`, error);
                }
            }

            showAlert(message, type = 'info') {
                try {
                    const alertHtml = `
                        <div class="alert alert-${type} alert-dismissible fade show position-fixed" 
                             style="top: 120px; right: 20px; z-index: 9999; min-width: 300px;">
                            <i class="fas fa-info-circle me-2"></i>
                            ${message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    `;
                    
                    document.body.insertAdjacentHTML('beforeend', alertHtml);
                    
                    setTimeout(() => {
                        const alerts = document.querySelectorAll('.alert');
                        if (alerts.length > 0) {
                            const lastAlert = alerts[alerts.length - 1];
                            try {
                                const bsAlert = new bootstrap.Alert(lastAlert);
                                bsAlert.close();
                            } catch (e) {
                                lastAlert.remove();
                            }
                        }
                    }, 5000);
                    
                } catch (error) {
                    console.error('❌ Errore visualizzazione alert:', error);
                    alert(message);
                }
            }

            findParkingById(id) {
                try {
                    const numericId = parseInt(id);
                    return this.parkings.find(p => p.id === numericId) || null;
                } catch (error) {
                    console.error('❌ Errore ricerca parcheggio:', error);
                    return null;
                }
            }

            async refreshData() {
                try {
                    this.showAlert('Aggiornamento dati in corso...', 'info');
                    
                    // Chiama l'endpoint di refresh del tuo ParkingModel
                    const response = await fetch('/Parking?handler=Refresh', {
                        method: 'GET',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        }
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            // Aggiorna i dati locali
                            this.parkings = this.validateAndNormalizeData(result.data);
                            this.filteredParkings = [...this.parkings];
                            this.renderParkings();
                            this.updateStats();
                            this.showAlert('Dati aggiornati con successo!', 'success');
                        } else {
                            throw new Error(result.message || 'Errore sconosciuto');
                        }
                    } else {
                        throw new Error('Errore di rete');
                    }
                } catch (error) {
                    console.error('❌ Errore refresh dati:', error);
                    this.showAlert('Errore durante l\'aggiornamento. Ricarico la pagina...', 'warning');
                    setTimeout(() => window.location.reload(), 2000);
                }
            }
        }

        // ============= FUNZIONI GLOBALI =============

        async function viewParkingDetails(parkingId) {
            try {
                console.log(`🔍 Caricamento dettagli parcheggio ${parkingId}`);
                
                const modal = new bootstrap.Modal(document.getElementById('parkingDetailsModal'));
                const content = document.getElementById('parkingDetailsContent');
                
                content.innerHTML = `
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Caricamento...</span>
                        </div>
                        <p class="mt-2 text-muted">Caricamento dettagli...</p>
                    </div>
                `;
                modal.show();
                
                try {
                    // Usa l'endpoint del tuo ParkingModel
                    const response = await fetch(`/Parking?handler=Details&id=${parkingId}`);
                    
                    if (response.ok) {
                        const result = await response.json();
                        
                        if (result.success && result.data) {
                            const parking = result.data;
                            const percentuale = parking.Capienza > 0 ? 
                                Math.round((parking.PostiLiberi / parking.Capienza) * 100) : 0;
                            
                            let slotsHtml = '';
                            if (result.slots && result.slots.length > 0) {
                                slotsHtml = `
                                    <h6 class="mt-3">Disposizione Slot</h6>
                                    <div class="row g-2">
                                        ${result.slots.map(slot => `
                                            <div class="col-2">
                                                <div class="text-center p-2 border rounded ${slot.isOccupied ? 'bg-danger text-white' : 'bg-success text-white'}">
                                                    <small>${slot.numero}</small>
                                                </div>
                                            </div>
                                        `).join('')}
                                    </div>
                                `;
                            }
                            
                            content.innerHTML = `
                                <div class="row">
                                    <div class="col-md-8">
                                        <h5 class="mb-3">${parking.Nome}</h5>
                                        <p class="text-muted mb-3">
                                            <i class="fas fa-map-marker-alt text-danger me-2"></i>
                                            ${parking.Indirizzo}
                                        </p>
                                        <div class="row g-3">
                                            <div class="col-4 text-center">
                                                <div class="border rounded p-3">
                                                    <h4 class="text-primary mb-2">${parking.Capienza}</h4>
                                                    <small class="text-muted">Capienza totale</small>
                                                </div>
                                            </div>
                                            <div class="col-4 text-center">
                                                <div class="border rounded p-3">
                                                    <h4 class="text-success mb-2">${parking.PostiLiberi}</h4>
                                                    <small class="text-muted">Posti liberi</small>
                                                </div>
                                            </div>
                                            <div class="col-4 text-center">
                                                <div class="border rounded p-3">
                                                    <h4 class="text-warning mb-2">${parking.PostiOccupati}</h4>
                                                    <small class="text-muted">Posti occupati</small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mt-3">
                                            <div class="progress" style="height: 15px;">
                                                <div class="progress-bar ${percentuale > 50 ? 'bg-success' : percentuale > 20 ? 'bg-warning' : 'bg-danger'}" 
                                                     style="width: ${percentuale}%">
                                                    ${percentuale}% disponibile
                                                </div>
                                            </div>
                                        </div>
                                        ${slotsHtml}
                                    </div>
                                    <div class="col-md-4">
                                        <div class="bg-light rounded p-3 text-center mb-3">
                                            <i class="fas fa-clock fa-2x text-muted mb-3"></i>
                                            <h6>Orari di accesso</h6>
                                            <p class="text-muted mb-0">24/7 Disponibile</p>
                                        </div>
                                        <div class="bg-light rounded p-3 text-center">
                                            <i class="fas fa-euro-sign fa-2x text-muted mb-3"></i>
                                            <h6>Tariffa</h6>
                                            <p class="text-muted mb-0">Gratuito</p>
                                        </div>
                                    </div>
                                </div>
                            `;
                        } else {
                            throw new Error(result.message || 'Dati non trovati');
                        }
                    } else {
                        throw new Error('Errore di rete');
                    }
                } catch (apiError) {
                    console.warn('API non disponibile, uso dati locali:', apiError);
                    
                    // Fallback ai dati locali
                    const parking = window.parkingManager?.findParkingById(parkingId);
                    
                    if (parking) {
                        const percentuale = parking.capienza > 0 ? 
                            Math.round((parking.postiLiberi / parking.capienza) * 100) : 0;
                        
                        content.innerHTML = `
                            <div class="row">
                                <div class="col-md-8">
                                    <h5 class="mb-3">${parking.nome}</h5>
                                    <p class="text-muted mb-3">
                                        <i class="fas fa-map-marker-alt text-danger me-2"></i>
                                        ${parking.indirizzo}
                                    </p>
                                    <div class="row g-3">
                                        <div class="col-4 text-center">
                                            <div class="border rounded p-3">
                                                <h4 class="text-primary mb-2">${parking.capienza}</h4>
                                                <small class="text-muted">Capienza totale</small>
                                            </div>
                                        </div>
                                        <div class="col-4 text-center">
                                            <div class="border rounded p-3">
                                                <h4 class="text-success mb-2">${parking.postiLiberi}</h4>
                                                <small class="text-muted">Posti liberi</small>
                                            </div>
                                        </div>
                                        <div class="col-4 text-center">
                                            <div class="border rounded p-3">
                                                <h4 class="text-warning mb-2">${parking.postiOccupati}</h4>
                                                <small class="text-muted">Posti occupati</small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-3">
                                        <div class="progress" style="height: 15px;">
                                            <div class="progress-bar ${percentuale > 50 ? 'bg-success' : percentuale > 20 ? 'bg-warning' : 'bg-danger'}" 
                                                 style="width: ${percentuale}%">
                                                ${percentuale}% disponibile
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="bg-light rounded p-3 text-center mb-3">
                                        <i class="fas fa-clock fa-2x text-muted mb-3"></i>
                                        <h6>Orari di accesso</h6>
                                        <p class="text-muted mb-0">24/7 Disponibile</p>
                                    </div>
                                    <div class="bg-light rounded p-3 text-center">
                                        <i class="fas fa-euro-sign fa-2x text-muted mb-3"></i>
                                        <h6>Tariffa</h6>
                                        <p class="text-muted mb-0">Gratuito</p>
                                    </div>
                                </div>
                            </div>
                        `;
                    } else {
                        content.innerHTML = `
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Parcheggio non trovato
                            </div>
                        `;
                    }
                }
                
            } catch (error) {
                console.error('❌ Errore visualizzazione dettagli:', error);
                const content = document.getElementById('parkingDetailsContent');
                if (content) {
                    content.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Errore nel caricamento dei dettagli
                        </div>
                    `;
                }
            }
        }

        function showDirections(parkingId) {
            try {
                const parking = window.parkingManager?.findParkingById(parkingId);
                if (parking) {
                    window.parkingManager.showAlert(
                        `Indicazioni per ${parking.nome} disponibili nella mappa interattiva`,
                        'info'
                    );
                } else {
                    window.parkingManager.showAlert('Parcheggio non trovato', 'error');
                }
            } catch (error) {
                console.error('❌ Errore indicazioni:', error);
                alert('Funzione indicazioni stradali in arrivo!');
            }
        }

        async function reserveSpot(parkingId) {
            try {
                const parking = window.parkingManager?.findParkingById(parkingId);
                
                if (!parking) {
                    window.parkingManager.showAlert('Parcheggio non trovato', 'danger');
                    return;
                }
                
                if (parking.postiLiberi <= 0) {
                    window.parkingManager.showAlert('Impossibile prenotare: parcheggio pieno', 'warning');
                    return;
                }
                
                const confirmMessage = `Vuoi prenotare un posto nel parcheggio "${parking.nome}"?\n\nPosti disponibili: ${parking.postiLiberi}/${parking.capienza}`;
                
                if (confirm(confirmMessage)) {
                    try {
                        // Usa l'endpoint del tuo ParkingModel
                        const response = await fetch('/Parking?handler=Reserve', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                            },
                            body: JSON.stringify({ id: parkingId })
                        });
                        
                        if (response.ok) {
                            const result = await response.json();
                            
                            if (result.success) {
                                window.parkingManager.showAlert(
                                    `Prenotazione confermata! Slot ${result.slotNumber} nel parcheggio ${result.parkingName}`,
                                    'success'
                                );
                                
                                // Refresh dati dopo prenotazione
                                setTimeout(() => {
                                    window.parkingManager.refreshData();
                                }, 2000);
                            } else {
                                throw new Error(result.message || 'Errore nella prenotazione');
                            }
                        } else {
                            throw new Error('Errore di rete');
                        }
                    } catch (apiError) {
                        console.warn('API prenotazione non disponibile:', apiError);
                        window.parkingManager.showAlert(
                            'Prenotazione effettuata con successo! (Simulazione)',
                            'success'
                        );
                    }
                }
                
            } catch (error) {
                console.error('❌ Errore prenotazione:', error);
                if (window.parkingManager) {
                    window.parkingManager.showAlert('Errore durante la prenotazione', 'danger');
                }
            }
        }

        function refreshParkings() {
            try {
                if (window.parkingManager) {
                    window.parkingManager.refreshData();
                } else {
                    window.location.reload();
                }
            } catch (error) {
                console.error('❌ Errore refresh:', error);
                window.location.reload();
            }
        }

        function clearFilters() {
            try {
                const searchInput = document.getElementById('searchInput');
                const availabilityFilter = document.getElementById('availabilityFilter');
                const sortFilter = document.getElementById('sortFilter');
                
                if (searchInput) searchInput.value = '';
                if (availabilityFilter) availabilityFilter.value = '';
                if (sortFilter) sortFilter.value = 'name';
                
                if (window.parkingManager) {
                    window.parkingManager.filterParkings();
                    window.parkingManager.showAlert('Filtri resettati', 'success');
                }
            } catch (error) {
                console.error('❌ Errore clear filtri:', error);
            }
        }

        // ============= INIZIALIZZAZIONE =============

        let parkingManager;

        document.addEventListener('DOMContentLoaded', function() {
            try {
                console.log('🚀 Inizializzazione pagina Parcheggi con ParkingModel...');
                
                // Crea istanza ParkingManager che usa i dati del tuo Model
                parkingManager = new ParkingManager();
                window.parkingManager = parkingManager;
                
                console.log('✅ Pagina Parcheggi caricata completamente');
                
            } catch (error) {
                console.error('❌ Errore inizializzazione pagina:', error);
                
                // Fallback minimo
                window.parkingManager = {
                    showAlert: (msg, type) => {
                        const alertClass = type === 'danger' ? 'alert-danger' : 
                                         type === 'success' ? 'alert-success' : 
                                         type === 'warning' ? 'alert-warning' : 'alert-info';
                        
                        const alertHtml = `
                            <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                                 style="top: 120px; right: 20px; z-index: 9999;">
                                ${msg}
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        `;
                        document.body.insertAdjacentHTML('beforeend', alertHtml);
                    },
                    findParkingById: () => null,
                    refreshData: () => window.location.reload()
                };
            }
        });

        // Error handler globale
        window.addEventListener('error', function(event) {
            console.error('🚨 Errore JavaScript globale:', event.error);
            
            if (window.parkingManager && typeof window.parkingManager.showAlert === 'function') {
                window.parkingManager.showAlert(
                    'Si è verificato un errore. Ricarica la pagina se il problema persiste.',
                    'warning'
                );
            }
        });

        console.log('🎯 Script parcheggi caricato - integrato con ParkingModel');
        
    </script>
</body>
</html>