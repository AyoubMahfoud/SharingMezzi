@page
@model SharingMezzi.Web.Pages.ParkingModel
@using SharingMezzi.Web.Models
@using static SharingMezzi.Web.Models.SlotStatus
@{
    ViewData["Title"] = "Parcheggi";
    Layout = "_Layout";
}

<!-- Page Header -->
<div class="page-header-section animate-fade-in-up mb-4">
    <div class="d-flex justify-content-between align-items-center flex-wrap">
        <div>
            <h1 class="page-title">
                <i class="fas fa-parking text-primary me-3"></i>
                Parcheggi Disponibili
            </h1>
            <p class="page-subtitle">Trova e prenota i migliori parcheggi nelle vicinanze</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" onclick="exportParkingData()">
                <i class="fas fa-download me-2"></i>Esporta
            </button>
            <button class="btn btn-primary" onclick="refreshParkings()">
                <i class="fas fa-sync-alt me-2"></i>Aggiorna
            </button>
        </div>
    </div>
</div>

<!-- Error Message -->
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Loading State -->
@if (Model.IsLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Caricamento...</span>
        </div>
        <p class="mt-3 text-muted">Caricamento parcheggi in corso...</p>
    </div>
}
else
{
    <!-- Stats Overview Cards -->
    <div class="row g-4 mb-5">
        <div class="col-xl-3 col-lg-6">
            <div class="content-card text-center h-100">
                <div class="stat-icon bg-primary mb-3">
                    <i class="fas fa-parking text-white fa-2x"></i>
                </div>
                <h3 class="stat-number text-primary mb-2">@Model.GetTotalParkings()</h3>
                <p class="stat-label text-muted mb-1">Parcheggi Totali</p>
                <div class="stat-trend positive">
                    <i class="fas fa-arrow-up me-1"></i>
                    <span>Tutti disponibili</span>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6">
            <div class="content-card text-center h-100">
                <div class="stat-icon bg-success mb-3">
                    <i class="fas fa-check-circle text-white fa-2x"></i>
                </div>
                <h3 class="stat-number text-success mb-2">@Model.GetAvailableSpots()</h3>
                <p class="stat-label text-muted mb-1">Posti Liberi</p>
                <div class="stat-trend positive">
                    <i class="fas fa-arrow-up me-1"></i>
                    <span>@{
                        var percentage = Model.GetTotalCapacity() > 0 ? Math.Round((double)Model.GetAvailableSpots() / Model.GetTotalCapacity() * 100, 1) : 0;
                    }@percentage% disponibilità</span>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6">
            <div class="content-card text-center h-100">
                <div class="stat-icon bg-warning mb-3">
                    <i class="fas fa-car text-white fa-2x"></i>
                </div>
                <h3 class="stat-number text-warning mb-2">@Model.GetOccupiedSpots()</h3>
                <p class="stat-label text-muted mb-1">Posti Occupati</p>
                <div class="stat-trend">
                    <i class="fas fa-chart-line me-1"></i>
                    <span>Bassa occupazione</span>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6">
            <div class="content-card text-center h-100">
                <div class="stat-icon bg-info mb-3">
                    <i class="fas fa-percentage text-white fa-2x"></i>
                </div>
                <h3 class="stat-number text-info mb-2">@Model.GetOccupancyRate()%</h3>
                <p class="stat-label text-muted mb-1">Tasso Occupazione</p>
                <div class="stat-trend positive">
                    <i class="fas fa-trend-down me-1"></i>
                    <span>Molto basso</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filters Section -->
    <div class="content-card mb-4">
        <div class="card-header-section">
            <h4><i class="fas fa-search text-primary me-2"></i>Ricerca e Filtri</h4>
            <p class="text-muted mb-0">Filtra i parcheggi per trovare quello più adatto alle tue esigenze</p>
        </div>
        
        <div class="row g-3 mt-3">
            <div class="col-md-4">
                <label class="form-label fw-semibold">
                    <i class="fas fa-search me-1"></i>Cerca per nome o indirizzo
                </label>
                <input type="text" class="form-control" id="searchInput" placeholder="Inserisci nome o indirizzo...">
            </div>
            
            <div class="col-md-3">
                <label class="form-label fw-semibold">
                    <i class="fas fa-filter me-1"></i>Disponibilità
                </label>
                <select class="form-select" id="availabilityFilter">
                    <option value="all">Tutti i parcheggi</option>
                    <option value="available">Solo disponibili</option>
                    <option value="full">Solo pieni</option>
                </select>
            </div>
            
            <div class="col-md-3">
                <label class="form-label fw-semibold">
                    <i class="fas fa-sort me-1"></i>Ordina per
                </label>
                <select class="form-select" id="sortFilter">
                    <option value="name">Nome</option>
                    <option value="distance">Distanza</option>
                    <option value="availability">Disponibilità</option>
                    <option value="rating">Valutazione</option>
                </select>
            </div>
            
            <div class="col-md-2 d-flex align-items-end">
                <button class="btn btn-outline-secondary w-100" onclick="resetFilters()">
                    <i class="fas fa-times me-1"></i>Reset
                </button>
            </div>
        </div>
    </div>

    <!-- Parking Cards Grid -->
    <div class="row g-4" id="parkingGrid">
        @foreach (var parking in Model.Parkings ?? new List<Parking>())
        {
            <div class="col-xl-4 col-lg-6 col-md-6">
                <div class="content-card parking-card h-100">
                    <!-- Card Header -->
                    <div class="parking-card-header d-flex justify-content-between align-items-start mb-3">
                        <div class="parking-info">
                            <h5 class="parking-name mb-1">
                                <i class="fas fa-parking text-primary me-2"></i>
                                @parking.Nome
                            </h5>
                            <p class="parking-address text-muted mb-0">
                                <i class="fas fa-map-marker-alt me-1"></i>
                                @parking.Indirizzo
                            </p>
                        </div>
                        <div class="availability-badge">
                            @{
                                var availableSlots = parking.Slots?.Count(s => s.Stato == SlotStatus.Libero) ?? 0;
                                var totalSlots = parking.Slots?.Count ?? 0;
                                var availabilityPercentage = totalSlots > 0 ? Math.Round((double)availableSlots / totalSlots * 100, 0) : 0;
                            }
                            <span class="badge @(availabilityPercentage > 50 ? "bg-success" : availabilityPercentage > 20 ? "bg-warning" : "bg-danger") fs-6">
                                @availableSlots/@totalSlots
                            </span>
                        </div>
                    </div>

                    <!-- Card Content -->
                    <div class="parking-card-content mb-3">
                        <div class="row g-2">
                            <div class="col-6">
                                <div class="info-item">
                                    <span class="info-label">Capienza:</span>
                                    <span class="info-value fw-bold">@totalSlots</span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="info-item">
                                    <span class="info-label">Liberi:</span>
                                    <span class="info-value text-success fw-bold">@availableSlots</span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="info-item">
                                    <span class="info-label">Occupati:</span>
                                    <span class="info-value text-warning fw-bold">@(totalSlots - availableSlots)</span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="info-item">
                                    <span class="info-label">Disponibilità:</span>
                                    <span class="info-value @(availabilityPercentage > 50 ? "text-success" : availabilityPercentage > 20 ? "text-warning" : "text-danger") fw-bold">
                                        @availabilityPercentage%
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Status Message -->
                    <div class="status-message mb-3">
                        @if (availabilityPercentage > 80)
                        {
                            <div class="alert alert-success py-2 mb-0">
                                <i class="fas fa-check-circle me-2"></i>
                                <strong>Molti posti disponibili</strong> - Prenotazione immediata
                            </div>
                        }
                        else if (availabilityPercentage > 30)
                        {
                            <div class="alert alert-warning py-2 mb-0">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Posti limitati</strong> - Prenota presto
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger py-2 mb-0">
                                <i class="fas fa-times-circle me-2"></i>
                                <strong>Pochi posti disponibili</strong> - Cerca alternative
                            </div>
                        }
                    </div>

                    <!-- Card Actions -->
                    <div class="parking-card-actions d-grid gap-2">
                        <button class="btn btn-outline-primary btn-sm" onclick="showParkingDetails('@parking.Id')">
                            <i class="fas fa-info-circle me-2"></i>Dettagli Completi
                        </button>
                        <button class="btn btn-outline-success btn-sm" onclick="getDirections('@parking.Indirizzo')">
                            <i class="fas fa-directions me-2"></i>Indicazioni
                        </button>
                        @if (availableSlots > 0)
                        {
                            <button class="btn btn-success btn-sm" onclick="bookParkingSpot('@parking.Id')">
                                <i class="fas fa-flag me-2"></i>Prenota Posto
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary btn-sm" disabled>
                                <i class="fas fa-ban me-2"></i>Nessun posto disponibile
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- No Results Message -->
    @if (!(Model.Parkings?.Any() ?? false))
    {
        <div class="content-card text-center py-5">
            <div class="empty-state">
                <i class="fas fa-parking fa-4x text-muted mb-3"></i>
                <h4 class="text-muted">Nessun parcheggio trovato</h4>
                <p class="text-muted">Prova a modificare i filtri di ricerca o riprova più tardi.</p>
                <button class="btn btn-primary" onclick="refreshParkings()">
                    <i class="fas fa-sync-alt me-2"></i>Riprova
                </button>
            </div>
        </div>
    }
} @* MANCAVA QUESTA CHIUSURA DEL BLOCCO ELSE *@

<!-- Parking Details Modal -->
<div class="modal fade" id="parkingDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-parking text-primary me-2"></i>
                    Dettagli Parcheggio
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="parkingDetailsContent">
                <!-- Content will be loaded dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
                <button type="button" class="btn btn-primary" onclick="bookFromModal()">
                    <i class="fas fa-flag me-2"></i>Prenota Posto
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Parking Management Functions
        function refreshParkings() {
            location.reload();
        }

        function exportParkingData() {
            const parkingData = {
                totalParkings: @Model.GetTotalParkings(),
                availableSpots: @Model.GetAvailableSpots(),
                occupiedSpots: @Model.GetOccupiedSpots(),
                occupancyRate: @Model.GetOccupancyRate(),
                exportDate: new Date().toISOString()
            };

            const dataStr = JSON.stringify(parkingData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'parcheggi-data.json';
            link.click();
            URL.revokeObjectURL(url);

            showNotification('Dati parcheggi esportati con successo!', 'success');
        }

        function resetFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('availabilityFilter').value = 'all';
            document.getElementById('sortFilter').value = 'name';
            
            // Show all parking cards
            document.querySelectorAll('.parking-card').forEach(card => {
                card.closest('.col-xl-4').style.display = 'block';
            });

            showNotification('Filtri resettati', 'info');
        }

        function showParkingDetails(parkingId) {
            // Load parking details dynamically
            const modal = new bootstrap.Modal(document.getElementById('parkingDetailsModal'));
            modal.show();
            
            // Simulate loading details
            document.getElementById('parkingDetailsContent').innerHTML = `
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Caricamento...</span>
                    </div>
                    <p class="mt-2">Caricamento dettagli...</p>
                </div>
            `;
            
            // Simulate API call
            setTimeout(() => {
                document.getElementById('parkingDetailsContent').innerHTML = `
                    <div class="parking-details">
                        <h6 class="fw-bold mb-3">Informazioni Generali</h6>
                        <div class="row g-3 mb-3">
                            <div class="col-md-6">
                                <strong>Nome:</strong> Centro Storico
                            </div>
                            <div class="col-md-6">
                                <strong>Indirizzo:</strong> Piazza Castello 1
                            </div>
                            <div class="col-md-6">
                                <strong>Capienza Totale:</strong> 20 posti
                            </div>
                            <div class="col-md-6">
                                <strong>Posti Liberi:</strong> 20 posti
                            </div>
                        </div>
                        
                        <h6 class="fw-bold mb-3">Servizi Disponibili</h6>
                        <div class="d-flex flex-wrap gap-2 mb-3">
                            <span class="badge bg-success">Parcheggio Coperto</span>
                            <span class="badge bg-info">Vigilanza 24h</span>
                            <span class="badge bg-warning">Illuminazione</span>
                            <span class="badge bg-primary">Accesso Disabili</span>
                        </div>
                        
                        <h6 class="fw-bold mb-3">Tariffe</h6>
                        <p class="text-muted">€2.00/ora - €15.00/giorno</p>
                    </div>
                `;
            }, 1000);
        }

        function getDirections(address) {
            // Open Google Maps with directions
            const encodedAddress = encodeURIComponent(address);
            window.open(`https://www.google.com/maps/dir/?api=1&destination=${encodedAddress}`, '_blank');
            
            showNotification('Apertura indicazioni su Google Maps', 'info');
        }

        function bookParkingSpot(parkingId) {
            showNotification('Prenotazione in corso...', 'info');
            
            // Simulate booking process
            setTimeout(() => {
                showNotification('Posto prenotato con successo!', 'success');
            }, 2000);
        }

        function bookFromModal() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('parkingDetailsModal'));
            modal.hide();
            bookParkingSpot();
        }

        function showNotification(message, type = 'info') {
            const alertClass = type === 'success' ? 'alert-success' : 
                             type === 'warning' ? 'alert-warning' : 
                             type === 'danger' ? 'alert-danger' : 'alert-info';

            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 120px; right: 20px; z-index: 9999; min-width: 300px;">
                    <i class="fas fa-info-circle me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            setTimeout(() => {
                const alerts = document.querySelectorAll('.alert');
                if (alerts.length > 0) {
                    const lastAlert = alerts[alerts.length - 1];
                    try {
                        const bsAlert = new bootstrap.Alert(lastAlert);
                        bsAlert.close();
                    } catch (e) {
                        lastAlert.remove();
                    }
                }
            }, 5000);
        }

        // Search and filter functionality
        document.getElementById('searchInput')?.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            filterParkings(searchTerm);
        });

        document.getElementById('availabilityFilter')?.addEventListener('change', function() {
            filterParkings();
        });

        function filterParkings(searchTerm = '') {
            const cards = document.querySelectorAll('.parking-card');
            const availabilityFilter = document.getElementById('availabilityFilter').value;
            
            cards.forEach(card => {
                const cardContainer = card.closest('.col-xl-4');
                const parkingName = card.querySelector('.parking-name').textContent.toLowerCase();
                const parkingAddress = card.querySelector('.parking-address').textContent.toLowerCase();
                const availabilityBadge = card.querySelector('.availability-badge .badge');
                const isAvailable = availabilityBadge.classList.contains('bg-success');
                
                let showCard = true;
                
                // Search filter
                if (searchTerm && !parkingName.includes(searchTerm) && !parkingAddress.includes(searchTerm)) {
                    showCard = false;
                }
                
                // Availability filter
                if (availabilityFilter === 'available' && !isAvailable) {
                    showCard = false;
                } else if (availabilityFilter === 'full' && isAvailable) {
                    showCard = false;
                }
                
                cardContainer.style.display = showCard ? 'block' : 'none';
            });
        }

        // Page initialization
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🎯 Pagina Parcheggi caricata con design premium');
            
            // Add smooth animations
            const cards = document.querySelectorAll('.content-card');
            cards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
                card.classList.add('animate-fade-in-up');
            });
        });
    </script>
}

<style>
    /* Parking-specific styles */
    .parking-card {
        transition: all 0.3s ease;
        border: 1px solid var(--border-secondary);
    }

    .parking-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-lg);
        border-color: var(--primary);
    }

    .parking-name {
        color: var(--text-primary);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .parking-address {
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .availability-badge .badge {
        font-size: 0.9rem;
        padding: 0.5rem 0.75rem;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        background: var(--bg-secondary);
        border-radius: var(--radius-md);
        font-size: 0.9rem;
    }

    .info-label {
        color: var(--text-secondary);
        font-weight: 500;
    }

    .info-value {
        color: var(--text-primary);
    }

    .status-message .alert {
        border: none;
        border-radius: var(--radius-md);
        font-size: 0.9rem;
    }

    .parking-card-actions .btn {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
    }

    .empty-state {
        color: var(--text-muted);
    }

    .empty-state i {
        opacity: 0.5;
    }

    /* Stats cards */
    .stat-icon {
        width: 80px;
        height: 80px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1rem;
    }

    .stat-number {
        font-size: 2.5rem;
        font-weight: 800;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        font-size: 0.9rem;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .stat-trend {
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.25rem;
        color: var(--text-secondary);
    }

    .stat-trend.positive {
        color: var(--success);
    }
</style>